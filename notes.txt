Scratch book notes 

-3 routers
api/users
api/auth
api/budgets

start with creating budget object 
const budget = { budget obj with all the attributes };
create a new repo, put to GitHub 

npm install
express, mocha, chai, morgan, body-parser

--------------------------------------------------------------------
* Define Your App's Purpose *

To track the daily, weekly, and monthly budget of a user's spending habits and prevent over spending.

--------------------------------------------------------------------
* Write Your App Idea Down *

The app should be a daily budget tracker of budget spending habits. The user can set their monthly and/or weekly budget. It will focus on weekly budget, so the user stays concious of it the whole week. Keeps the same budget each week, and can get feed back on their own spending habits and how close they are to accurately staying on budget. By inputting each item, the user remains concious of what they're spending, and the math in the background shows them how much is spent and left for their week.
If a user needs to change their weekly budget, they can see the effects a weekly budget has on a month, or year: i.e. changing a weekly budget by $50, means $200 in a month, which can be one's car payment. Do they need to change their budget, can the afford it? Or can they change their habits to reach their goals?
A category section for the user to choose if this item is a necessity or a want will serve as another reminder, and also show the user as the week goes on, what's dominating their useage. 

 
--------------------------------------------------------------------
* Write User Stories to Determine Features *

-As a user, I should be able to sign up for the budget app 
-As a user, I should be able to log into the budget app
-As a user, I should be able to set my weekly budget
-As a user, I should see how much is left in my weekly budget
-As a user, I should see how much I spent in my weekly budget
-As a user, I should see how much have left in my weekly budget
-As a user, I should be able to add $/item I've purchased to the weekly budget 
-As a user, I should see what i spent my weekly budget on, each $/item
-As a user, I should be able to categorize each $/item as: necessity or want 
-As a user, I should be able to see a bar/pie graph of the two categories (necessity/want) to track which I'm spending more on

-As a user, I should be able to see my cost of living breakdown for a month 
-As a user, I should be able to input my monthly earnings
-As a user, I should be able to input my monthly expenses and see what money is left over 

--------------------------------------------------------------------
* MVP- Minimum Viable Product *

-As a user, I should be able to set my weekly budget
-As a user, I should see how much is left in my weekly budget
-As a user, I should see how much I spent in my weekly budget
-As a user, I should see how much have left in my weekly budget
-As a user, I should be able to add $/item I've purchased to the weekly budget 

--------------------------------------------------------------------
* List Out the Screens the User Will See *

- A screen for me to set and see my weekly budget
- A screen showing the weekly budget  
    below showing what was spent and what is left in weekly budget,
- A screen to add the $/items purchased,
    below showing the the list of $/items

- A screen for the montly cost of living breakdown, monthly earnings, and the difference (money left over)

--------------------------------------------------------------------
* User Journey for Each Screen - User Flows *

(1) Input weekly budget goal 
------------------------
User enters $ amount --------> (2) Home screen showing weekly budget  


(2) Screen showing weekly budget 
-------------------------
User enters $/item recently purchased --> (2) show $/item in list below 

(3) Screen showing monthly cost of living 
-------------------------
User enters monthly cost of living (known costs)
User enters monthly earnings --> (4) shows list of $/items, and $ difference 


--------------------------------------------------------------------


3 main parts of web app

-front end (css, html, jquery)

-server (API, backend) talks to database

-database (API, backend) schemed database 

// If they sign in, you make your authentication requests to check the username/password and send back an auth token, which you should store in your state (or in session storage, if you wanna get fancy). You should also store their username and id (mongo id) in the state.

// If a login is successful, you should make a request to the budgets endpoint to look for the budget that belongs to that user, and return it

// When that is successful, you should make a post request to the budgets endpoint to create a new, blank budget with the userId stored on there so you can find it later

// auth functions 